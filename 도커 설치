오래된 버전 삭제하기
혹시나 기존의 오래된 버전이 있는지 확실히 할 수 있으며, 있다면 최신 버전 설치를 위해 삭제 해줍니다.

sudo apt-get remove docker docker-engine docker.io containerd runc

repository 설정하기
apt package index를 업데이트 하고 HTTPS를 통해 repository 를 이용하기 위해 pakcage 들을 설치 해줍니다.

sudo apt-get update

sudo apt-get install \
    ca-certificates \
    curl \
    gnupg \
    lsb-release
    
 Docker의 Official GPG Key 를 등록합니다.
    
 curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
 
 stable repository 를 등록해줍니다.
 
  echo \
  "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \
  $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
 
 
 Docker Engine 설치하기
아래 명령어를 입력하면 자동으로 최신 버전이 설치 됩니다

sudo apt-get update
sudo apt-get install docker-ce docker-ce-cli containerd.io

설치 완료
docker --version

sudo docker run hello-world


Docker Compose는 여러개의 도커 어플리케이션 컨테이너들을 정의하고 실행 할 수 있게 도와주는 툴 입니다. YAML 파일을 사용해 어플리케이션의 서비스를 설정하고 하나의 커맨드만으로 여러개의 도커 컨테이너들을 사용 할 수 있습니다.

Docker 를 설치 해도 Compose 가 딸려 오는 것은 아니기 때문에 따로 설치 해 주어야 합니다.

sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose

실행 할 수 있는 권한을 부여 합니다.

 sudo chmod +x /usr/local/bin/docker-compose
 
 잘 설치 되었는지 확인해봅니다.
 
 docker-compose --version

## docker-compose version 1.29.2, build 5becea4c







2. nvidia-docker 설치

 

  - GPG키와 저장소 추가

distribution=$(. /etc/os-release;echo $ID$VERSION_ID) \
   && curl -s -L https://nvidia.github.io/nvidia-docker/gpgkey | sudo apt-key add - \
   && curl -s -L https://nvidia.github.io/nvidia-docker/$distribution/nvidia-docker.list | sudo tee /etc/apt/sources.list.d/nvidia-docker.list
   
   - nvidia-docker 설치

$ sudo apt-get update
$ sudo apt-get install -y nvidia-docker2

- docker 재시작

sudo systemctl restart docker
 주의) restart 명령어로 docker를 재실행하면 기존의 실행중이던 컨테이너들이 stop 되게 된다. 그래서 기존의 컨테이너 실행시 --restart-always 로 실행된 컨테이너는 자동으로 실행되지만 그렇지 않은 컨테이너는 수동으로 재실행시켜 주어야 한다.



3. docker 명령어로 gpu 사용가능하게 컨테이너 띄우기

 

 docker에서 컨테이너를 띄우면 현재 호스트와 공유가 되지 않아 GPU 사용이 불가능하다. 그래서 호스트와 컨테이너를 연결해 호스트의 GPU 사용을 가능하게 해주는 것이 nvidia-docker 이다.

 

 앞선 1, 2의 설치가 완료되었다면 아래의 명령어로 컨테이너에서 nvidia-smi 명령어가 작동하여 출력됨을 확인한다.

docker run --rm --gpus all ubuntu:18.04 nvidia-smi















sudo 없이


도커그룹생성
sudo groupadd docker

도커그룹에 유저추가
sudo usermod -aG docker ${USER}
or
sudo gpasswd -a $USER docker

도커 재시작
sudo service docker restart

현재 사용자 로그아웃 및 재로그인
sudo su - // 루트사용자로 변경
su - ubuntu // 사용자로 변경

테스트
docker run hello-world


